--
-- DDL Schema
--
create table if not exists cliente (
    id      int8        generated by default as identity,
    nome    varchar(40) not null,
    limite  int8        not null default (0),
    saldo   int8        not null default (0),
    primary key (id),
    CONSTRAINT saldo_check check ((saldo + limite) >= 0)
);

create table if not exists transacao (
    id            int8        generated by default as identity,
    descricao     varchar(10) not null,
    tipo          varchar(10) not null,
    valor         int8        not null,
    cliente_id    int8        not null,
    realizada_em  timestamp   not null default (now() at time zone 'utc'),
    primary key (id)
);

alter table if exists transacao
       add constraint FK_transacao_cliente_id
       foreign key (cliente_id)
       references cliente ;

CREATE INDEX IF NOT EXISTS transacao_cliente_id_realizada_em_idx ON transacao (cliente_id, realizada_em DESC);

--
-- Initial data
--
INSERT INTO cliente (nome, limite)
  VALUES
    ('o barato sai caro'     ,   1000 * 100),
    ('zan corp ltda'         ,    800 * 100),
    ('les cruders'           ,  10000 * 100),
    ('padaria joia de cocaia', 100000 * 100),
    ('kid mais'              ,   5000 * 100)
  ;

INSERT INTO transacao (descricao, tipo, valor, cliente_id, realizada_em)
  SELECT
      left(md5(random()::text), 10)                    AS descricao, -- Gera uma string aleatória de 10 caracteres para a descrição
      (ARRAY['DEBITO', 'CREDITO'])[ceil(random() * 2)] AS tipo, -- Escolhe aleatoriamente entre 'DEBITO' e 'CREDITO'
      (round(random() * 10000)+1)::int                 AS valor, -- Gera um valor aleatório entre 1 e 10000
      (round(random() * 4)+1)::int                     AS cliente_id, -- Gera um id de cliente aleatório entre 1 e 1000
      now() - (random() * (interval '90 days'))        AS realizada_em -- Gera uma data/hora aleatória nos últimos 90 dias
  FROM generate_series(1, 250000) s;
